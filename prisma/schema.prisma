generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique

  image     String?

  password  Password?
  otps      Otp[]   

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}
model Password {
  id        String   @id @default(cuid())

  hash      String

  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("passwords")
}

model Otp {
  id        String   @id @default(cuid())

  otp       Int
  email     String
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otps")
}

model Food {
  id              String        @id @default(cuid())
  name            String
  calories        Float
  carbohydrates   Float
  protein         Float
  fat             Float
  sodium          Float
  potassium       Float
  cholesterol     Float
  fiber           Float?
  sugar           Float?
  saturatedFat    Float?
  transFat        Float?
  vitamins        Json? 
  minerals        Json?
  image           String?

  category        FoodCategory  @relation("CategoryToFood", fields: [categoryId], references: [id])
  categoryId      String

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  drinks          Drink[]       @relation("FoodToDrinks")
  snacks          Snack[]        @relation("FoodToSnacks")
  fruits          Fruit[]       @relation("FoodToFruits")
  vegetables      Vegetable[]   @relation("FoodToVegetables")

  @@map("foods")
}

model FoodCategory {
  id          String   @id @default(cuid())
  type        String
  description String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  foods       Food[]   @relation("CategoryToFood")

  @@map("food_categories")
}

model Drink {
  id            String     @id @default(cuid())
  name          String
  calories      Float
  carbohydrates Float
  protein       Float
  fat           Float
  sugar         Float?
  isAlcoholic   Boolean
  servingSize   String
  image         String?

  food          Food       @relation("FoodToDrinks", fields: [foodId], references: [id])
  foodId        String     @unique

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("drinks")
}

model Snack {
  id            String     @id @default(cuid())
  name          String
  calories      Float
  carbohydrates Float
  protein       Float
  fat           Float
  sugar         Float?
  isProcessed   Boolean
  servingSize   String
  image         String?

  food          Food       @relation("FoodToSnacks", fields: [foodId], references: [id])
  foodId        String     @unique

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("snacks")
}

model Fruit {
  id            String     @id @default(cuid())
  name          String
  calories      Float
  carbohydrates Float
  protein       Float
  fat           Float
  sugar         Float?
  isTropical    Boolean
  servingSize   String
  image         String? 

  food          Food       @relation("FoodToFruits", fields: [foodId], references: [id])
  foodId        String     @unique

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("fruits")
}

model Vegetable {
  id            String     @id @default(cuid())
  name          String
  calories      Float
  carbohydrates Float
  protein       Float
  fat           Float
  fiber         Float?
  isLeafy       Boolean
  isRoot        Boolean
  servingSize   String
  image         String?
  
  food          Food       @relation("FoodToVegetables", fields: [foodId], references: [id])
  foodId        String     @unique

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("vegetables")
}